<dec f='codebrowser/include/curl/multi.h' l='233' type='CURLMsg * curl_multi_info_read(CURLM * multi_handle, int * msgs_in_queue)'/>
<use f='codebrowser/lib/easy.c' l='713' u='c' c='easy_transfer'/>
<def f='codebrowser/lib/multi.c' l='2293' ll='2316' type='CURLMsg * curl_multi_info_read(struct Curl_multi * multi, int * msgs_in_queue)'/>
<doc f='codebrowser/lib/multi.c' l='2283'>/*
 * curl_multi_info_read()
 *
 * This function is the primary way for a multi/multi_socket application to
 * figure out if a transfer has ended. We MUST make this function as fast as
 * possible as it will be polled frequently and we MUST NOT scan any lists in
 * here to figure out things. We must scale fine to thousands of handles and
 * beyond. The current design is fully O(1).
 */</doc>
<use f='codebrowser/tests/libtest/lib1500.c' l='72' u='c' c='test'/>
<use f='codebrowser/tests/libtest/lib1515.c' l='99' u='c' c='do_one_request'/>
<use f='codebrowser/tests/libtest/lib1531.c' l='134' u='c' c='test'/>
<use f='codebrowser/tests/libtest/lib1552.c' l='75' u='c' c='test'/>
<use f='codebrowser/tests/libtest/lib1900.c' l='193' u='c' c='test'/>
<use f='codebrowser/tests/libtest/lib504.c' l='78' u='c' c='test'/>
<use f='codebrowser/tests/libtest/lib507.c' l='82' u='c' c='test'/>
<use f='codebrowser/tests/libtest/lib540.c' l='160' u='c' c='loop'/>
<use f='codebrowser/tests/libtest/lib582.c' l='154' u='c' c='checkForCompletion'/>
<use f='codebrowser/tests/libtest/lib591.c' l='131' u='c' c='test'/>
<use f='codebrowser/tests/libtest/lib597.c' l='132' u='c' c='test'/>
