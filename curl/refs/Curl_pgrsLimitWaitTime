<dec f='codebrowser/lib/progress.h' l='52' type='long Curl_pgrsLimitWaitTime(curl_off_t cursize, curl_off_t startsize, curl_off_t limit, struct curltime start, struct curltime now)'/>
<use f='codebrowser/lib/multi.c' l='1839' u='c' c='multi_runsingle'/>
<use f='codebrowser/lib/multi.c' l='1847' u='c' c='multi_runsingle'/>
<use f='codebrowser/lib/multi.c' l='1871' u='c' c='multi_runsingle'/>
<use f='codebrowser/lib/multi.c' l='1880' u='c' c='multi_runsingle'/>
<def f='codebrowser/lib/progress.c' l='258' ll='284' type='long Curl_pgrsLimitWaitTime(curl_off_t cursize, curl_off_t startsize, curl_off_t limit, struct curltime start, struct curltime now)'/>
<use f='codebrowser/lib/progress.c' l='294' u='c' c='Curl_pgrsSetDownloadCounter'/>
<use f='codebrowser/lib/progress.c' l='312' u='c' c='Curl_pgrsSetUploadCounter'/>
<doc f='codebrowser/lib/progress.c' l='239'>/*
 * This is used to handle speed limits, calculating how much milliseconds we
 * need to wait until we&apos;re back under the speed limit, if needed.
 *
 * The way it works is by having a &quot;starting point&quot; (time &amp; amount of data
 * transferred by then) used in the speed computation, to be used instead of
 * the start of the transfer.  This starting point is regularly moved as
 * transfer goes on, to keep getting accurate values (instead of average over
 * the entire transfer).
 *
 * This function takes the current amount of data transferred, the amount at
 * the starting point, the limit (in bytes/s), the time of the starting point
 * and the current time.
 *
 * Returns -1 if no waiting is needed (not enough data transferred since
 * starting point yet), 0 when no waiting is needed but the starting point
 * should be reset (to current), or the number of milliseconds to wait to get
 * back under the speed limit.
 */</doc>
