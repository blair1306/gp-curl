<dec f='codebrowser/lib/strdup.h' l='30' type='void * Curl_saferealloc(void * ptr, size_t size)'/>
<use f='codebrowser/lib/content_encoding.c' l='374' u='c' c='Curl_unencode_gzip_write'/>
<use f='codebrowser/lib/escape.c' l='113' u='c' c='curl_easy_escape'/>
<use f='codebrowser/lib/http.c' l='1252' u='c' c='Curl_add_buffer'/>
<use f='codebrowser/lib/rtsp.c' l='636' u='c' c='rtsp_rtp_readwrite'/>
<def f='codebrowser/lib/strdup.c' l='93' ll='100' type='void * Curl_saferealloc(void * ptr, size_t size)'/>
<doc f='codebrowser/lib/strdup.c' l='79'>/***************************************************************************
 *
 * Curl_saferealloc(ptr, size)
 *
 * Does a normal realloc(), but will free the data pointer if the realloc
 * fails. If &apos;size&apos; is zero, it will free the data and return a failure.
 *
 * This convenience function is provided and used to help us avoid a common
 * mistake pattern when we could pass in a zero, catch the NULL return and end
 * up free&apos;ing the memory twice.
 *
 * Returns the new pointer or NULL on failure.
 *
 ***************************************************************************/</doc>
