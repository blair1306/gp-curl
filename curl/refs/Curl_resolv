<dec f='codebrowser/lib/hostip.h' l='86' type='int Curl_resolv(struct connectdata * conn, const char * hostname, int port, struct Curl_dns_entry ** dnsentry)'/>
<use f='codebrowser/lib/connect.c' l='354' u='c' c='bindlocal'/>
<use f='codebrowser/lib/ftp.c' l='1087' u='c' c='ftp_state_use_port'/>
<use f='codebrowser/lib/ftp.c' l='1939' u='c' c='ftp_state_pasv_resp'/>
<use f='codebrowser/lib/ftp.c' l='1955' u='c' c='ftp_state_pasv_resp'/>
<def f='codebrowser/lib/hostip.c' l='444' ll='527' type='int Curl_resolv(struct connectdata * conn, const char * hostname, int port, struct Curl_dns_entry ** entry)'/>
<use f='codebrowser/lib/hostip.c' l='665' u='c' c='Curl_resolv_timeout'/>
<doc f='codebrowser/lib/hostip.c' l='423'>/*
 * Curl_resolv() is the main name resolve function within libcurl. It resolves
 * a name and returns a pointer to the entry in the &apos;entry&apos; argument (if one
 * is provided). This function might return immediately if we&apos;re using asynch
 * resolves. See the return codes.
 *
 * The cache entry we return will get its &apos;inuse&apos; counter increased when this
 * function is used. You MUST call Curl_resolv_unlock() later (when you&apos;re
 * done using this struct) to decrease the counter again.
 *
 * In debug mode, we specifically test for an interface name &quot;LocalHost&quot;
 * and resolve &quot;localhost&quot; instead as a means to permit test cases
 * to connect to a local test server with any host name.
 *
 * Return codes:
 *
 * CURLRESOLV_ERROR   (-1) = error, no pointer
 * CURLRESOLV_RESOLVED (0) = OK, pointer provided
 * CURLRESOLV_PENDING  (1) = waiting for response, no pointer
 */</doc>
<use f='codebrowser/lib/socks.c' l='160' u='c' c='Curl_SOCKS4'/>
<use f='codebrowser/lib/socks.c' l='601' u='c' c='Curl_SOCKS5'/>
