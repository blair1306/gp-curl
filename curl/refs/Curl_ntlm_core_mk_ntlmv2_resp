<dec f='codebrowser/lib/curl_ntlm_core.h' l='88' type='CURLcode Curl_ntlm_core_mk_ntlmv2_resp(unsigned char * ntlmv2hash, unsigned char * challenge_client, struct ntlmdata * ntlm, unsigned char ** ntresp, unsigned int * ntresp_len)'/>
<def f='codebrowser/lib/curl_ntlm_core.c' l='693' ll='773' type='CURLcode Curl_ntlm_core_mk_ntlmv2_resp(unsigned char * ntlmv2hash, unsigned char * challenge_client, struct ntlmdata * ntlm, unsigned char ** ntresp, unsigned int * ntresp_len)'/>
<doc f='codebrowser/lib/curl_ntlm_core.c' l='676'>/*
 * Curl_ntlm_core_mk_ntlmv2_resp()
 *
 * This creates the NTLMv2 response as set in the ntlm type-3 message.
 *
 * Parameters:
 *
 * ntlmv2hash       [in] - The ntlmv2 hash (16 bytes)
 * challenge_client [in] - The client nonce (8 bytes)
 * ntlm             [in] - The ntlm data struct being used to read TargetInfo
                           and Server challenge received in the type-2 message
 * ntresp          [out] - The address where a pointer to newly allocated
 *                         memory holding the NTLMv2 response.
 * ntresp_len      [out] - The length of the output message.
 *
 * Returns CURLE_OK on success.
 */</doc>
<use f='codebrowser/lib/vauth/ntlm.c' l='585' u='c' c='Curl_auth_create_ntlm_type3_message'/>
